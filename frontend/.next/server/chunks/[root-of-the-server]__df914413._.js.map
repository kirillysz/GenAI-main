{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/lazzy/Documents/GenAI-main/frontend/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nconst API = process.env.FASTAPI_URL;\n\nexport async function POST(req: NextRequest) {\n  try {\n\n    const { content, model = 'llama3.1', telegram_id } = await req.json();\n    console.log(telegram_id)\n    \n    let userRes = await fetch(`${API}/users/get?telegram_id=${telegram_id}`);\n    let userId: number;\n    \n    if (userRes.status === 404) {\n      const addUser = await fetch(`${API}/users/add`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ telegram_id }),\n      });\n      \n      if (!addUser.ok) throw new Error('Не удалось создать пользователя');\n      userId = await addUser.json();\n    } else {\n      if (!userRes.ok) throw new Error('Ошибка при получении пользователя');\n      userId = await userRes.json();\n    }\n\n    let chatsRes = await fetch(`${API}/chats/get_all_chats?user_id=${userId}`);\n    let chats = chatsRes.ok ? await chatsRes.json() : [];\n    let chatId: string;\n\n    if (!Array.isArray(chats) || chats.length === 0) {\n      const newChat = await fetch(`${API}/chats/create`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n\n        body: JSON.stringify({\n          user_id: userId,\n          chat_title: 'Новый чат',\n          model,\n        }),\n      });\n      if (!newChat.ok) throw new Error('Не удалось создать чат');\n      chatId = await newChat.json();\n    } else {\n      chatId = chats[0].chat_id;\n    }\n\n    await fetch(`${API}/messages/add`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ chat_id: chatId, role: 'user', content }),\n    });\n\n    const msgHistoryRes = await fetch(`${API}/messages/get_all_messages?chat_id=${chatId}`);\n    if (!msgHistoryRes.ok) throw new Error('Не удалось получить историю сообщений');\n    const messages = await msgHistoryRes.json();\n\n    const aiRes = await fetch(`${API}/neuro/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ chat_id: chatId, messages, model }),\n    });\n\n    if (!aiRes.ok) {\n      const errText = await aiRes.text();\n\n      return NextResponse.json({ error: errText }, { status: aiRes.status });\n    }\n    const aiData = await aiRes.json();\n\n    await fetch(`${API}/messages/add`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        chat_id: chatId,\n        role: 'assistant',\n        content: aiData.reply,\n      }),\n    });\n\n    return NextResponse.json(aiData);\n  } catch (err: any) {\n    console.error(err);\n    return NextResponse.json({ error: err.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AAEC,eAAe,KAAK,GAAgB;IACzC,IAAI;QAEF,MAAM,EAAE,OAAO,EAAE,QAAQ,UAAU,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QACnE,QAAQ,GAAG,CAAC;QAEZ,IAAI,UAAU,MAAM,MAAM,GAAG,IAAI,uBAAuB,EAAE,aAAa;QACvE,IAAI;QAEJ,IAAI,QAAQ,MAAM,KAAK,KAAK;YAC1B,MAAM,UAAU,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE;gBAC9C,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAY;YACrC;YAEA,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,IAAI,MAAM;YACjC,SAAS,MAAM,QAAQ,IAAI;QAC7B,OAAO;YACL,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,IAAI,MAAM;YACjC,SAAS,MAAM,QAAQ,IAAI;QAC7B;QAEA,IAAI,WAAW,MAAM,MAAM,GAAG,IAAI,6BAA6B,EAAE,QAAQ;QACzE,IAAI,QAAQ,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,KAAK,EAAE;QACpD,IAAI;QAEJ,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU,MAAM,MAAM,KAAK,GAAG;YAC/C,MAAM,UAAU,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAE;gBACjD,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAE9C,MAAM,KAAK,SAAS,CAAC;oBACnB,SAAS;oBACT,YAAY;oBACZ;gBACF;YACF;YACA,IAAI,CAAC,QAAQ,EAAE,EAAE,MAAM,IAAI,MAAM;YACjC,SAAS,MAAM,QAAQ,IAAI;QAC7B,OAAO;YACL,SAAS,KAAK,CAAC,EAAE,CAAC,OAAO;QAC3B;QAEA,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAE;YACjC,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAQ,MAAM;gBAAQ;YAAQ;QAChE;QAEA,MAAM,gBAAgB,MAAM,MAAM,GAAG,IAAI,mCAAmC,EAAE,QAAQ;QACtF,IAAI,CAAC,cAAc,EAAE,EAAE,MAAM,IAAI,MAAM;QACvC,MAAM,WAAW,MAAM,cAAc,IAAI;QAEzC,MAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,EAAE;YAC7C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAQ;gBAAU;YAAM;QAC1D;QAEA,IAAI,CAAC,MAAM,EAAE,EAAE;YACb,MAAM,UAAU,MAAM,MAAM,IAAI;YAEhC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAQ,GAAG;gBAAE,QAAQ,MAAM,MAAM;YAAC;QACtE;QACA,MAAM,SAAS,MAAM,MAAM,IAAI;QAE/B,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAE;YACjC,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;gBACT,MAAM;gBACN,SAAS,OAAO,KAAK;YACvB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjE;AACF","debugId":null}}]
}